{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hi","title":"Home"},{"location":"#hi","text":"","title":"Hi"},{"location":"laradock/","text":"\u5728\u5beb Laravel \u4e4b\u524d\u7684\u74b0\u5883\u8a2d\u7f6e\u975e\u5e38\u7e41\u7463\uff0c\u800c\u4e14\u6700\u8fd1\u4e5f\u5728\u627e\u80fd\u5920\u8f15\u9b06\u67b6\u597d\u591a\u500b laravel \u5c08\u6848\u7684\u65b9\u6cd5\uff0c\u6240\u4ee5\u5c31\u4f86\u8a66\u8a66 Laradock\uff0c\u6709\u4e9b\u96f7\u6240\u4ee5\u9084\u662f\u8a18\u9304\u4e00\u4e0b git clone https://github.com/Laradock/laradock.git \u4fee\u6539 Laradock \u4e0b\u7684 .env cp env-example .env \u4f60\u5c08\u6848\u7684\u8def\u5f91 APP_CODE_PATH_HOST=/path/to/project APP_CODE_PATH_CONTAINER=/var/www \u5982\u6b64 /path/to/project \u6703\u5c0d\u61c9\u81f3 workspace \u7684 /var/www \uff0c\u5982\u679c\u4f60\u4e00\u6b21\u8981\u8dd1\u591a\u500b\u5c08\u6848\u53ef\u4ee5\u5c07\u4ed6\u5011\u90fd\u653e\u5230\u8a72\u8cc7\u6599\u593e\u4e0b Nginx .env NGINX_HOST_HTTP_PORT=80 NGINX_HOST_HTTPS_PORT=443 NGINX_SSL_PATH=./nginx/ssl/ nginx/sites \u4e0b\u7de8\u8f2f\u8a2d\u5b9a\u6a94 $ cp laravel.conf.example laravel.test.conf Mysql .env: MYSQL_USER , MYSQL_PASSWORD \u8981\u548c laravel \u4e0b\u7684 .env \u4e00\u6a23 MYSQL_DATABASE=dataset MYSQL_USER=default MYSQL_PASSWORD=secret MYSQL_ROOT_PASSWORD= laravel .env: DB_HOST \u6539\u70ba mysql DB_HOST=mysql \u5982\u679c\u4f60\u5e0c\u671b root \u5bc6\u78bc\u70ba\u7a7a\uff0c\u5728 docker-compose.yml \u4e2d\u65b0\u589e MYSQL_ALLOW_EMPTY_PASSWORD=true environment: - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} - MYSQL_ALLOW_EMPTY_PASSWORD=true - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - TZ=${WORKSPACE_TIMEZONE} phpmyadmin .env: PMA_USER , PMA_PASSWORD \u8981\u548c laravel \u4e0b\u7684 .env \u4e00\u6a23 PMA_USER=default PMA_PASSWORD=secret PMA_ROOT_PASSWORD= ... PMA_PORT=8081 \u555f\u52d5 \u7b2c\u4e00\u6b21\u8dd1\u53ef\u80fd\u6703\u6709\u9ede\u4e45 docker-compose up -d nginx mysql phpmyadmin \u932f\u8aa4: \u9700\u8981\u5c07 docker \u66f4\u65b0\u5230\u6700\u65b0\u7248 Service 'mysql' failed to build: Please provide a source image with from prior to commit \u8a2d\u5b9a laravel \u7b49\u5230\u74b0\u5883\u90fd\u5f04\u597d\u5f8c\u5c31\u9032\u5165 container \u8a2d\u5b9a\u597d laravel project $ docker-compose exec workspace bash $ composer install ... migrate \u932f\u8aa41 php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known \u539f\u56e0\u662f\u672c\u5730\u4e0d\u77e5\u9053 mysql \u662f\u4ec0\u9ebc\uff0c\u9700\u8981\u6307\u5b9a DB_HOST \u70ba 127.0.0.1 $ env DB_HOST=127.0.0.1 php artisan migrate migrate \u932f\u8aa42 SQLSTATE[42000]: Syntax error or access violation: 1231 Variable 'sql_mode' can't be set to the value of 'NO_AUTO_CREATE_USER' \u9700\u8981\u4fee\u6539 laravel project \u7684 config/database.php\uff0c\u5c07 mysql \u7684 stict \u6539\u70ba false \u8dd1\u591a\u500b\u5c08\u6848 \u8981\u5c07\u591a\u500b project \u653e\u5230\u540c\u4e00\u53f0\u6a5f\u5668\u4e0a\u4e5f\u5f88\u7c21\u55ae\uff0c\u9996\u5148\u5728\u4f60\u7684 APP_CODE_PATH_HOST \u4e2d\u653e\u597d\u591a\u500b project /path/to/project - project1 - project2 \u7136\u5f8c\u53bb Laradock/nginx/sites \u4e0b\u591a\u5efa\u7acb\u591a\u500b\u8a2d\u5b9a\u64cb # project1.conf server { listen 80; listen [::]:80; server_name project1; root /var/www/project1/public; ... } # project2.conf server { listen 80; listen [::]:80; server_name project2; root /var/www/project2/public; ... } \u5982\u679c\u662f\u5728\u672c\u5730\u6e2c\u8a66\u5728 /etc/hosts \u52a0\u4e0a 127.0.0.1 project1 127.0.0.1 project2 \u518d\u4f86\u8981\u65b0\u589e\u591a\u500b database \uff0c\u4e0a\u7db2\u67e5\u4e86\u4e0b\u597d\u50cf\u6c92\u6709\u8f15\u9b06\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5efa\u7acb\u591a\u500b database\uff0c\u9700\u8981\u5728 Laradock/mysql/docker-entrypoint-initdb.d \u4e0b\u5beb\u8173\u672c\u8b93 container \u5efa\u7acb\u6642\u57f7\u884c\uff0c\u65e2\u7136\u90fd\u8981\u5728\u9019\u908a\u5beb\u8173\u672c\u4e86\uff0c\u4e7e\u8106\u6240\u6709\u6703\u7528\u5230\u7684\u8cc7\u6599\u5eab\u90fd\u5728\u9019\u908a\u8a2d\u5b9a\u597d\uff0c\u4e0a\u8ff0\u7684\u8a2d\u5b9a\u64cb\u5c31\u586b\u500b dummy database \u548c user # createdb.sql CREATE DATABASE IF NOT EXISTS `project1`; CREATE DATABASE IF NOT EXISTS `project2`; CREATE USER 'user1'@'%' IDENTIFIED BY 'user1'; CREATE USER 'user2'@'%' IDENTIFIED BY 'user2'; GRANT ALL ON `project1`.* TO 'user1'@'%'; GRANT ALL ON `project2`.* TO 'user2'@'%'; \u8a18\u5f97\u5728 mysql \u8a2d\u5b9a\u6709\u66f4\u52d5\u5f8c\u522a\u6389\u8cc7\u6599\u518d\u91cd\u5efa $ rm -Rf ~/.laradock/data/mysql \u5982\u6b64\u5c31\u67b6\u597d\u591a\u500b laravel \u5c08\u6848\u62c9\uff0c\u5982\u679c https \u9700\u8981\u6191\u8b49\u53ef\u4ee5\u4f7f\u7528 cerbot\uff0c\u6703\u81ea\u52d5\u5e6b\u4f60\u53bb letsencrypt \u7533\u8acb\u6191\u8b49\uff0c\u518d\u5c07 cerbot \u5b58\u653e\u6191\u8b49\u7684\u4f4d\u5740\u548c nginx \u9023\u901a\u5373\u53ef\u3002","title":"Laradock"},{"location":"laradock/#laradock-env","text":"cp env-example .env \u4f60\u5c08\u6848\u7684\u8def\u5f91 APP_CODE_PATH_HOST=/path/to/project APP_CODE_PATH_CONTAINER=/var/www \u5982\u6b64 /path/to/project \u6703\u5c0d\u61c9\u81f3 workspace \u7684 /var/www \uff0c\u5982\u679c\u4f60\u4e00\u6b21\u8981\u8dd1\u591a\u500b\u5c08\u6848\u53ef\u4ee5\u5c07\u4ed6\u5011\u90fd\u653e\u5230\u8a72\u8cc7\u6599\u593e\u4e0b","title":"\u4fee\u6539 Laradock \u4e0b\u7684 .env"},{"location":"laradock/#nginx","text":".env NGINX_HOST_HTTP_PORT=80 NGINX_HOST_HTTPS_PORT=443 NGINX_SSL_PATH=./nginx/ssl/ nginx/sites \u4e0b\u7de8\u8f2f\u8a2d\u5b9a\u6a94 $ cp laravel.conf.example laravel.test.conf","title":"Nginx"},{"location":"laradock/#mysql","text":".env: MYSQL_USER , MYSQL_PASSWORD \u8981\u548c laravel \u4e0b\u7684 .env \u4e00\u6a23 MYSQL_DATABASE=dataset MYSQL_USER=default MYSQL_PASSWORD=secret MYSQL_ROOT_PASSWORD= laravel .env: DB_HOST \u6539\u70ba mysql DB_HOST=mysql \u5982\u679c\u4f60\u5e0c\u671b root \u5bc6\u78bc\u70ba\u7a7a\uff0c\u5728 docker-compose.yml \u4e2d\u65b0\u589e MYSQL_ALLOW_EMPTY_PASSWORD=true environment: - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} - MYSQL_ALLOW_EMPTY_PASSWORD=true - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - TZ=${WORKSPACE_TIMEZONE}","title":"Mysql"},{"location":"laradock/#phpmyadmin","text":".env: PMA_USER , PMA_PASSWORD \u8981\u548c laravel \u4e0b\u7684 .env \u4e00\u6a23 PMA_USER=default PMA_PASSWORD=secret PMA_ROOT_PASSWORD= ... PMA_PORT=8081","title":"phpmyadmin"},{"location":"laradock/#_1","text":"\u7b2c\u4e00\u6b21\u8dd1\u53ef\u80fd\u6703\u6709\u9ede\u4e45 docker-compose up -d nginx mysql phpmyadmin \u932f\u8aa4: \u9700\u8981\u5c07 docker \u66f4\u65b0\u5230\u6700\u65b0\u7248 Service 'mysql' failed to build: Please provide a source image with from prior to commit","title":"\u555f\u52d5"},{"location":"laradock/#laravel","text":"\u7b49\u5230\u74b0\u5883\u90fd\u5f04\u597d\u5f8c\u5c31\u9032\u5165 container \u8a2d\u5b9a\u597d laravel project $ docker-compose exec workspace bash $ composer install ... migrate \u932f\u8aa41 php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known \u539f\u56e0\u662f\u672c\u5730\u4e0d\u77e5\u9053 mysql \u662f\u4ec0\u9ebc\uff0c\u9700\u8981\u6307\u5b9a DB_HOST \u70ba 127.0.0.1 $ env DB_HOST=127.0.0.1 php artisan migrate migrate \u932f\u8aa42 SQLSTATE[42000]: Syntax error or access violation: 1231 Variable 'sql_mode' can't be set to the value of 'NO_AUTO_CREATE_USER' \u9700\u8981\u4fee\u6539 laravel project \u7684 config/database.php\uff0c\u5c07 mysql \u7684 stict \u6539\u70ba false","title":"\u8a2d\u5b9a laravel"},{"location":"laradock/#_2","text":"\u8981\u5c07\u591a\u500b project \u653e\u5230\u540c\u4e00\u53f0\u6a5f\u5668\u4e0a\u4e5f\u5f88\u7c21\u55ae\uff0c\u9996\u5148\u5728\u4f60\u7684 APP_CODE_PATH_HOST \u4e2d\u653e\u597d\u591a\u500b project /path/to/project - project1 - project2 \u7136\u5f8c\u53bb Laradock/nginx/sites \u4e0b\u591a\u5efa\u7acb\u591a\u500b\u8a2d\u5b9a\u64cb # project1.conf server { listen 80; listen [::]:80; server_name project1; root /var/www/project1/public; ... } # project2.conf server { listen 80; listen [::]:80; server_name project2; root /var/www/project2/public; ... } \u5982\u679c\u662f\u5728\u672c\u5730\u6e2c\u8a66\u5728 /etc/hosts \u52a0\u4e0a 127.0.0.1 project1 127.0.0.1 project2 \u518d\u4f86\u8981\u65b0\u589e\u591a\u500b database \uff0c\u4e0a\u7db2\u67e5\u4e86\u4e0b\u597d\u50cf\u6c92\u6709\u8f15\u9b06\u7684\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u5efa\u7acb\u591a\u500b database\uff0c\u9700\u8981\u5728 Laradock/mysql/docker-entrypoint-initdb.d \u4e0b\u5beb\u8173\u672c\u8b93 container \u5efa\u7acb\u6642\u57f7\u884c\uff0c\u65e2\u7136\u90fd\u8981\u5728\u9019\u908a\u5beb\u8173\u672c\u4e86\uff0c\u4e7e\u8106\u6240\u6709\u6703\u7528\u5230\u7684\u8cc7\u6599\u5eab\u90fd\u5728\u9019\u908a\u8a2d\u5b9a\u597d\uff0c\u4e0a\u8ff0\u7684\u8a2d\u5b9a\u64cb\u5c31\u586b\u500b dummy database \u548c user # createdb.sql CREATE DATABASE IF NOT EXISTS `project1`; CREATE DATABASE IF NOT EXISTS `project2`; CREATE USER 'user1'@'%' IDENTIFIED BY 'user1'; CREATE USER 'user2'@'%' IDENTIFIED BY 'user2'; GRANT ALL ON `project1`.* TO 'user1'@'%'; GRANT ALL ON `project2`.* TO 'user2'@'%'; \u8a18\u5f97\u5728 mysql \u8a2d\u5b9a\u6709\u66f4\u52d5\u5f8c\u522a\u6389\u8cc7\u6599\u518d\u91cd\u5efa $ rm -Rf ~/.laradock/data/mysql \u5982\u6b64\u5c31\u67b6\u597d\u591a\u500b laravel \u5c08\u6848\u62c9\uff0c\u5982\u679c https \u9700\u8981\u6191\u8b49\u53ef\u4ee5\u4f7f\u7528 cerbot\uff0c\u6703\u81ea\u52d5\u5e6b\u4f60\u53bb letsencrypt \u7533\u8acb\u6191\u8b49\uff0c\u518d\u5c07 cerbot \u5b58\u653e\u6191\u8b49\u7684\u4f4d\u5740\u548c nginx \u9023\u901a\u5373\u53ef\u3002","title":"\u8dd1\u591a\u500b\u5c08\u6848"},{"location":"prepare/","text":"\u7531\u65bc\u5beb\u4e86C++ \u90a3\u9ebc\u591a\u5e74\u96d6\u7136\u77e5\u9053\u6709C11, C14\u7b49\u6a19\u6e96\u6162\u6162\u88ab\u767c\u5c55\u51fa\u4f86\uff0c\u4f46\u662f\u59cb\u7d42\u6c92\u6709\u597d\u597d\u4e86\u89e3 C++ \u548c C \u4e0a\u7684\u5dee\u7570\uff0c\u6642\u5e38\u767c\u73fe\u7528C++ \u5beb\u51fa\u4f86\u7684 code \u548c C \u5dee\u4e0d\u591a\uff0c\u6240\u4ee5\u6253\u7b97\u82b1\u6bb5\u6642\u9593\u4f86\u7814\u7a76\u7814\u7a76\uff0c\u63a5\u4e0b\u4f86\u5e7e\u7bc7\u662f\u6211\u770b Modern C++ Tutorial: C++11/14/17/20 On the Fly \u7684\u7b46\u8a18 \u4f5c\u8005\u63d0\u5230\u5e0c\u671b\u6211\u5011\u4e0d\u8981\u6709 \"C++ is not a superset of C\" \u7684\u60f3\u6cd5\uff0c\u76e1\u91cf\u5728C++ \u4e2d\u907f\u514d C style \u7684\u5beb\u6cd5\uff0c\u7576\u4f60\u9700\u8981\u4f7f\u7528\u5230 C \u6642\u8981\u5c07 C code \u548c C++ code \u5206\u958b\uff0c\u4e26\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u7de8\u8b6f\u518d include Deprecated Features \u4e0d\u8a72\u5c07 string literal constant \u7d66 char* \u61c9\u8a72\u7528 auto \u6216 const char* \u4ee3\u66ff char *str = \"literal constant\" // warning noexcept \u53d6\u4ee3 unexpected_handler , set_unexpected() \u7b49 unique_ptr \u53d6\u4ee3 auto_ptr register \u53ef\u4ee5\u4f7f\u7528\u4f46\u4e0d\u518d\u6709\u4efb\u4f55\u5be6\u969b\u610f\u7fa9 \u4e0d\u80fd\u5c0d bool \u8b8a\u6578\u4f7f\u7528 ++ explicitly declaring a destructor will prevent the implicit generation of a move constructor and move assignment operator. \u81f3\u65bc\u70ba\u4ec0\u9ebc\u8981\u9019\u500b\u641e\u6211\u5011\u5f8c\u7e8c\u518d\u8a0e\u8ad6 \u4f7f\u7528 static_cast , reinterpret_cast , const_cast \u53d6\u4ee3C\u8a9e\u8a00\u98a8\u683c\u7684\u578b\u614b\u8f49\u63db ( \u5728\u8b8a\u6578\u524d\u9762\u52a0(type) ) C++17 \u4e2d\u68c4\u7528\u4e86\u4e00\u4e9b C \u51fd\u5f0f\u5eab\uff0c\u50cf\u662f <cstdbool> , <ctgmath> \u7b49 \u9084\u6709\u5f88\u591a\u5f88\u591a ... \u7576\u7136\u4f60\u9084\u662f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u9019\u4e9b\u7279\u6027\uff0cDeprecated \u53ea\u662f\u8981\u544a\u8a34\u4f60\u9019\u4e9b\u7279\u6027\u5728\u672a\u4f86\u53ef\u80fd\u6703\u4e0d\u5728\u662f\u6a19\u6e96\uff0c\u958b\u767c\u8005\u6700\u597d\u5148\u5617\u8a66\u9069\u61c9\u6216\u6539\u8b8a\u7fd2\u6163 >< Deprecation is not completely unusable, it is only intended to imply that programmers will disappear from future standards and should be avoided. However, the deprecated features are still part of the standard library, and most of the features are actually \"permanently\" reserved for compatibility reasons. \u7de8\u8b6f $ clang++ -std=c++2a","title":"\u6e96\u5099"},{"location":"prepare/#deprecated-features","text":"\u4e0d\u8a72\u5c07 string literal constant \u7d66 char* \u61c9\u8a72\u7528 auto \u6216 const char* \u4ee3\u66ff char *str = \"literal constant\" // warning noexcept \u53d6\u4ee3 unexpected_handler , set_unexpected() \u7b49 unique_ptr \u53d6\u4ee3 auto_ptr register \u53ef\u4ee5\u4f7f\u7528\u4f46\u4e0d\u518d\u6709\u4efb\u4f55\u5be6\u969b\u610f\u7fa9 \u4e0d\u80fd\u5c0d bool \u8b8a\u6578\u4f7f\u7528 ++ explicitly declaring a destructor will prevent the implicit generation of a move constructor and move assignment operator. \u81f3\u65bc\u70ba\u4ec0\u9ebc\u8981\u9019\u500b\u641e\u6211\u5011\u5f8c\u7e8c\u518d\u8a0e\u8ad6 \u4f7f\u7528 static_cast , reinterpret_cast , const_cast \u53d6\u4ee3C\u8a9e\u8a00\u98a8\u683c\u7684\u578b\u614b\u8f49\u63db ( \u5728\u8b8a\u6578\u524d\u9762\u52a0(type) ) C++17 \u4e2d\u68c4\u7528\u4e86\u4e00\u4e9b C \u51fd\u5f0f\u5eab\uff0c\u50cf\u662f <cstdbool> , <ctgmath> \u7b49 \u9084\u6709\u5f88\u591a\u5f88\u591a ... \u7576\u7136\u4f60\u9084\u662f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u9019\u4e9b\u7279\u6027\uff0cDeprecated \u53ea\u662f\u8981\u544a\u8a34\u4f60\u9019\u4e9b\u7279\u6027\u5728\u672a\u4f86\u53ef\u80fd\u6703\u4e0d\u5728\u662f\u6a19\u6e96\uff0c\u958b\u767c\u8005\u6700\u597d\u5148\u5617\u8a66\u9069\u61c9\u6216\u6539\u8b8a\u7fd2\u6163 >< Deprecation is not completely unusable, it is only intended to imply that programmers will disappear from future standards and should be avoided. However, the deprecated features are still part of the standard library, and most of the features are actually \"permanently\" reserved for compatibility reasons.","title":"Deprecated Features"},{"location":"prepare/#_1","text":"$ clang++ -std=c++2a","title":"\u7de8\u8b6f"},{"location":"usability/","text":"Constant nullptr \u50b3\u7d71 C++ \u628a NULL \u7576\u6210 0 \u6216\u662f (void*)0 \uff0c\u9019\u53ef\u80fd\u6703\u767c\u751f\u5e7e\u500b\u554f\u984c NULL = (void*)0 : C++ \u4e0d\u5141\u8a31\u5c07 (void*) \u8f49\u63db\u70ba\u5176\u4ed6\u578b\u614b\uff0c\u6240\u4ee5\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u6703\u6709\u554f\u984c char *str = NULL; NULL = 0 : \u96d6\u7136\u8aaa\u5c07 NULL \u5b9a\u7fa9\u6210 0 \u53ef\u4ee5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c\uff0c\u4f46\u662f\u4f7f\u7528 overloading \u6642 void foo(char*); void foo(int); foo(NULL) \u6703\u9078\u64c7 void foo(int) \uff0c\u56e0\u70ba\u901a\u5e38\u6211\u5011\u4f7f\u7528 NULL \u90fd\u662f\u8981\u50b3\u7d66\u6307\u6a19\uff0c\u7d50\u679c\u537b\u662f\u547c\u53eb\u53c3\u6578 int \uff0c\u5341\u5206\u4e0d\u76f4\u89c0 \u70ba\u4e86\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0cC++11 \u5370\u5165\u4e86 nullptr \uff0c\u5176\u578b\u614b\u70ba nullptr_t \uff0c\u53ef\u4ee5\u8f49\u63db\u6210\u4efb\u4f55\u578b\u614b\u7684\u6307\u6a19 foo(0); // call foo(int) foo(NULL); // error foo(nullptr); // call foo(char*) constexpr \u5728 C++ \u4e2d\u5ba3\u544a\u9663\u5217\u6642\u53ea\u80fd\u4f7f\u7528 constant expression \u4f86\u6307\u5b9a\u9663\u5217\u5927\u5c0f\uff0c\u5373\u4f7f\u662f const \u8b8a\u6578\u4e5f\u662f\u975e\u6cd5\u7684 int len = 10; int arr[len]; //illegal const in len2 = 10; int arr2[len2]; //illegal \u4e0d\u904e\u5927\u5bb6\u4e00\u5b9a\u90fd\u7528\u904e\u4e0a\u8ff0\u7b2c\u4e8c\u7a2e\u65b9\u6cd5\u4f86\u6307\u5b9a\u9663\u5217\u5927\u5c0f\uff0c\u800c\u4e14 compiler \u4e5f\u90fd\u6c92\u6709\u5674\u904e\u932f\uff0c\u90a3\u662f\u56e0\u70ba\u5927\u591a\u6578 compiler \u90fd\u6709\u512a\u5316\uff0c\u4f7f\u5f97\u4e00\u4e9b\u4e0d\u5408\u6cd5\u7684\u5beb\u6cd5\u4e5f\u53ef\u4ee5\u88ab\u63a5\u53d7 \u5728 C++ 11 \u4e4b\u524d\u7de8\u8b6f\u5668\u7121\u6cd5\u660e\u78ba\u77e5\u9053\u8a72\u8b8a\u6578\u6216\u662f\u51fd\u6578\u56de\u50b3\u503c\u5c31\u662f\u500b\u5e38\u91cf\uff0c\u6240\u4ee5\u5728 C++11 \u4e2d\u5f15\u5165 constexpr \u9019\u500b\u95dc\u9375\u5b57\u544a\u8a34\u7de8\u8b6f\u5668\u61c9\u8a72\u53bb\u9a57\u8b49\u8a72\u8b8a\u6578\u6216\u662f\u51fd\u6578\u56de\u50b3\u503c\u5728\u7de8\u8b6f\u671f\u5c31\u662f\u4e00\u500b constant expression\uff0c\u4ee5\u4e0b\u90fd\u662f\u5408\u6cd5\u7684 constexpr int len_foo_constexpr() { return 5; } ... constexpr int len = 10; int arr[len]; constexpr int len2 = 1 + 2 + 3; int arr2[len2]; int arr3[len_foo_constexpr()]; ... constexpr \u7684\u51fd\u6578\u4e5f\u53ef\u4ee5\u7528\u65bc\u905e\u8ff4 constexpr int fibonacci(const int n) { return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2); } Variables and initialization declare variable in if/switch \u5728 C++17 \u4e4b\u524d\u5982\u679c\u6211\u5011\u8981\u627e\u5230 vector \u4e2d\u7684\u7279\u5b9a\u503c\u4e26\u4fee\u6539\u4ed6 const std::vector<int>::iterator itr = std::find(vec.begin(), vec.end(), 2); if (itr != vec.end()) *itr = 3; \u9019\u500b\u5730\u65b9\u7684 itr \u53ea\u662f\u500b\u66ab\u6642\u8a18\u9304\u7528\u7684\u8b8a\u6578\uff0c\u8ddf\u4f60\u5beb for \u6642\u88e1\u9762\u6703\u7528\u5230\u7684 i \u4e00\u6a23\uff0c\u7576\u4f60\u5df2\u7d93\u50cf\u4e0a\u8ff0\u5ba3\u544a\u904e itr \uff0c for \u8ff4\u5708\u7684\u8b8a\u6578\u540d\u7a31\u5c31\u53ea\u80fd\u63db\u4e00\u500b\u7528\uff0c\u5728 C++17 \u5f8c\u6211\u5011\u53ef\u4ee5\u5728 if \u4e2d\u5ba3\u544a\u8b8a\u6578\uff0c\u8b93\u958b\u767c\u8005\u53ef\u4ee5\u514d\u53bb\u9019\u7a2e\u5c0f\u7169\u60f1 if (const std::vector<int>::iterator itr = std::find(vec.begin(), vec.end(), 3); itr != vec.end()) *itr = 4; \u6301\u7e8c\u66f4\u65b0\u4e2d...","title":"Usability"},{"location":"usability/#constant","text":"","title":"Constant"},{"location":"usability/#nullptr","text":"\u50b3\u7d71 C++ \u628a NULL \u7576\u6210 0 \u6216\u662f (void*)0 \uff0c\u9019\u53ef\u80fd\u6703\u767c\u751f\u5e7e\u500b\u554f\u984c NULL = (void*)0 : C++ \u4e0d\u5141\u8a31\u5c07 (void*) \u8f49\u63db\u70ba\u5176\u4ed6\u578b\u614b\uff0c\u6240\u4ee5\u4ee5\u4e0b\u7684\u7a0b\u5f0f\u6703\u6709\u554f\u984c char *str = NULL; NULL = 0 : \u96d6\u7136\u8aaa\u5c07 NULL \u5b9a\u7fa9\u6210 0 \u53ef\u4ee5\u89e3\u6c7a\u4e0a\u8ff0\u554f\u984c\uff0c\u4f46\u662f\u4f7f\u7528 overloading \u6642 void foo(char*); void foo(int); foo(NULL) \u6703\u9078\u64c7 void foo(int) \uff0c\u56e0\u70ba\u901a\u5e38\u6211\u5011\u4f7f\u7528 NULL \u90fd\u662f\u8981\u50b3\u7d66\u6307\u6a19\uff0c\u7d50\u679c\u537b\u662f\u547c\u53eb\u53c3\u6578 int \uff0c\u5341\u5206\u4e0d\u76f4\u89c0 \u70ba\u4e86\u89e3\u6c7a\u9019\u4e9b\u554f\u984c\uff0cC++11 \u5370\u5165\u4e86 nullptr \uff0c\u5176\u578b\u614b\u70ba nullptr_t \uff0c\u53ef\u4ee5\u8f49\u63db\u6210\u4efb\u4f55\u578b\u614b\u7684\u6307\u6a19 foo(0); // call foo(int) foo(NULL); // error foo(nullptr); // call foo(char*)","title":"nullptr"},{"location":"usability/#constexpr","text":"\u5728 C++ \u4e2d\u5ba3\u544a\u9663\u5217\u6642\u53ea\u80fd\u4f7f\u7528 constant expression \u4f86\u6307\u5b9a\u9663\u5217\u5927\u5c0f\uff0c\u5373\u4f7f\u662f const \u8b8a\u6578\u4e5f\u662f\u975e\u6cd5\u7684 int len = 10; int arr[len]; //illegal const in len2 = 10; int arr2[len2]; //illegal \u4e0d\u904e\u5927\u5bb6\u4e00\u5b9a\u90fd\u7528\u904e\u4e0a\u8ff0\u7b2c\u4e8c\u7a2e\u65b9\u6cd5\u4f86\u6307\u5b9a\u9663\u5217\u5927\u5c0f\uff0c\u800c\u4e14 compiler \u4e5f\u90fd\u6c92\u6709\u5674\u904e\u932f\uff0c\u90a3\u662f\u56e0\u70ba\u5927\u591a\u6578 compiler \u90fd\u6709\u512a\u5316\uff0c\u4f7f\u5f97\u4e00\u4e9b\u4e0d\u5408\u6cd5\u7684\u5beb\u6cd5\u4e5f\u53ef\u4ee5\u88ab\u63a5\u53d7 \u5728 C++ 11 \u4e4b\u524d\u7de8\u8b6f\u5668\u7121\u6cd5\u660e\u78ba\u77e5\u9053\u8a72\u8b8a\u6578\u6216\u662f\u51fd\u6578\u56de\u50b3\u503c\u5c31\u662f\u500b\u5e38\u91cf\uff0c\u6240\u4ee5\u5728 C++11 \u4e2d\u5f15\u5165 constexpr \u9019\u500b\u95dc\u9375\u5b57\u544a\u8a34\u7de8\u8b6f\u5668\u61c9\u8a72\u53bb\u9a57\u8b49\u8a72\u8b8a\u6578\u6216\u662f\u51fd\u6578\u56de\u50b3\u503c\u5728\u7de8\u8b6f\u671f\u5c31\u662f\u4e00\u500b constant expression\uff0c\u4ee5\u4e0b\u90fd\u662f\u5408\u6cd5\u7684 constexpr int len_foo_constexpr() { return 5; } ... constexpr int len = 10; int arr[len]; constexpr int len2 = 1 + 2 + 3; int arr2[len2]; int arr3[len_foo_constexpr()]; ... constexpr \u7684\u51fd\u6578\u4e5f\u53ef\u4ee5\u7528\u65bc\u905e\u8ff4 constexpr int fibonacci(const int n) { return n == 1 || n == 2 ? 1 : fibonacci(n-1) + fibonacci(n-2); }","title":"constexpr"},{"location":"usability/#variables-and-initialization","text":"","title":"Variables and initialization"},{"location":"usability/#declare-variable-in-ifswitch","text":"\u5728 C++17 \u4e4b\u524d\u5982\u679c\u6211\u5011\u8981\u627e\u5230 vector \u4e2d\u7684\u7279\u5b9a\u503c\u4e26\u4fee\u6539\u4ed6 const std::vector<int>::iterator itr = std::find(vec.begin(), vec.end(), 2); if (itr != vec.end()) *itr = 3; \u9019\u500b\u5730\u65b9\u7684 itr \u53ea\u662f\u500b\u66ab\u6642\u8a18\u9304\u7528\u7684\u8b8a\u6578\uff0c\u8ddf\u4f60\u5beb for \u6642\u88e1\u9762\u6703\u7528\u5230\u7684 i \u4e00\u6a23\uff0c\u7576\u4f60\u5df2\u7d93\u50cf\u4e0a\u8ff0\u5ba3\u544a\u904e itr \uff0c for \u8ff4\u5708\u7684\u8b8a\u6578\u540d\u7a31\u5c31\u53ea\u80fd\u63db\u4e00\u500b\u7528\uff0c\u5728 C++17 \u5f8c\u6211\u5011\u53ef\u4ee5\u5728 if \u4e2d\u5ba3\u544a\u8b8a\u6578\uff0c\u8b93\u958b\u767c\u8005\u53ef\u4ee5\u514d\u53bb\u9019\u7a2e\u5c0f\u7169\u60f1 if (const std::vector<int>::iterator itr = std::find(vec.begin(), vec.end(), 3); itr != vec.end()) *itr = 4; \u6301\u7e8c\u66f4\u65b0\u4e2d...","title":"declare variable in if/switch"}]}